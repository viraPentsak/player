{"version":3,"sources":["reducers/index.js","store/index.js","constants/actions.js","components/ErrorBoundary/ErrorBoundary.js","utils/functions.js","components/UI/Loading/Loading.js","components/Player/Video.js","components/Player/Timeline/Timeline.js","components/Player/PlayerView.js","components/UI/Button/Button.js","components/Player/Player.js","constants/constants.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","videoSrc","fetchInProgress","error","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","Object","assign","payload","applyMiddleware","thunk","connect","props","children","className","getPercentage","total","number","decimals","Number","isNaN","toFixed","Loading","Video","videoRef","posterSrc","progressed","timeUpdated","videoIsLoaded","onProgress","onTimeUpdate","ref","poster","controls","src","Timeline","buffered","cssClass","playedStyle","width","played","bufferedStyle","style","PlayerView","playedPercent","bufferedPercent","Button","disabled","clicked","onClick","Player","_loadVideo","current","load","_getVideoSrc","fetchVideo","_updateState","key","val","setState","videoProgressHandler","videoElement","duration","bufferedTime","_getBufferedTime","bufferedPercentage","timeRangeObj","length","end","videoTimeUpdateHandler","currentTime","platedPercentage","createRef","prevProps","prevState","snapshot","this","Component","apiTime","Math","floor","random","throwError","round","dispatch","Promise","resolve","reject","setTimeout","then","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c2609d0d.chunk.js","sourcesContent":["import * as actions from './../constants/actions';\r\n\r\nconst defaultState = {\r\n    videoSrc : '',\r\n    fetchInProgress : false,\r\n    error: ''\r\n};\r\n\r\nexport const rootReducer = (state = defaultState, action) => {\r\n    if (action.type === actions.FETCH_VIDEO){\r\n        return Object.assign({}, state, {\r\n            videoSrc : action.payload,\r\n            fetchInProgress : false\r\n        })\r\n    }\r\n\r\n    if (action.type === actions.FETCH_ERROR){\r\n        return Object.assign({}, state, { error : action.payload, fetchInProgress : false })\r\n    }\r\n\r\n    if (action.type === actions.FETCHING_IN_PROGRESS){\r\n        return Object.assign({}, state, {fetchInProgress : true, error : '' })\r\n    }\r\n\r\n\r\n    return state;\r\n};","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer} from './../reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\nexport default store;","export const FETCH_VIDEO = 'FETCH_VIDEO';\r\nexport const FETCH_ERROR = 'FETCH_ERROR';\r\nexport const FETCHING_IN_PROGRESS = 'FETCHING_IN_PROGRESS';","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './ErrorBoundary.css';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        error: state.error\r\n    }\r\n};\r\n\r\nconst ErrorBoundary = (props) => {\r\n    const {children} = props;\r\n\r\n    return (\r\n        <div className='error'>\r\n            {props.error && <h2 className='error__text'>{props.error}</h2>}\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(ErrorBoundary);","export const getPercentage = (total, number, decimals = 0) => {\r\n    if (!Number.isNaN(total) && !Number.isNaN(number)){\r\n        return (number * 100 / total).toFixed(decimals);\r\n    }\r\n    return 0;\r\n};\r\n\r\nexport const getMockApiResponseTime = () => {\r\n    return Math.floor((Math.random() + 0.1) * 10000);\r\n};\r\n\r\nexport const maybeThrowApiError = () => {\r\n    const chance =  Math.round(Math.random() * 10);\r\n    return chance <= 2;\r\n};","import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className='loading'>\r\n            <span>This is a spinner. Your data is loading...</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\nimport Loading from \"../UI/Loading/Loading\";\r\n\r\nconst Video = (props) => {\r\n    const {\r\n        videoSrc,\r\n        videoRef,\r\n        posterSrc,\r\n        progressed,\r\n        timeUpdated,\r\n        videoIsLoaded,\r\n        fetchInProgress\r\n    } = props;\r\n    return (\r\n        <div className=\"video__inner\">\r\n            {fetchInProgress && <Loading/>}\r\n            <video className='video__element'\r\n                   onProgress={progressed}\r\n                   onTimeUpdate={timeUpdated}\r\n                   ref={videoRef}\r\n                   poster={posterSrc}\r\n                   controls={videoIsLoaded}>\r\n                <source src={videoSrc}/>\r\n            </video>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Video;","import React from 'react';\r\nimport './Timeline.css';\r\n\r\nconst Timeline = (props) => {\r\n    const {\r\n        videoIsLoaded,\r\n        buffered,\r\n        played\r\n    } = props;\r\n\r\n    let cssClass = 'timeline';\r\n    if (videoIsLoaded){\r\n        cssClass += ' is-loaded';\r\n    }\r\n    const playedStyle = { width: played + '%'};\r\n    const bufferedStyle = { width: buffered + '%'};\r\n\r\n    return (\r\n        <div className={cssClass}>\r\n            <div className=\"timeline__buffered\" style={bufferedStyle}/>\r\n            <div className=\"timeline__played\" style={playedStyle}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timeline;","import React from 'react';\r\n\r\nimport Video from \"./Video\";\r\nimport Timeline from \"./Timeline/Timeline\";\r\n\r\nimport './PlayerVideo.css';\r\n\r\nconst PlayerView = (props) => {\r\n    const {\r\n        playedPercent,\r\n        bufferedPercent,\r\n        videoIsLoaded,\r\n    } = props;\r\n    return (\r\n        <div className='video'>\r\n            <div className=\"video__wrapper\">\r\n                <Video {...props} />\r\n                <div className=\"video__timeline\">\r\n                    <Timeline\r\n                        videoIsLoaded={videoIsLoaded}\r\n                        buffered={bufferedPercent}\r\n                        played={playedPercent}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerView;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n    const {\r\n        children,\r\n        disabled,\r\n        type = 'button',\r\n        clicked\r\n    } = props;\r\n    return (\r\n        <button type={type} className='button' onClick={clicked} disabled={disabled}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React, {Component, createRef, Fragment} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchVideo} from \"../../actions\";\r\nimport {POSTER_SRC} from \"../../constants/constants\";\r\n\r\nimport PlayerView from \"./PlayerView\";\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nimport {getPercentage} from \"../../utils/functions\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        videoSrc: state.videoSrc,\r\n        fetchInProgress: state.fetchInProgress\r\n    }\r\n};\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            videoIsLoaded: false,\r\n            playedPercent: '0',\r\n            bufferedPercent: '0'\r\n        };\r\n        this.videoRef = createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.videoRef.current && prevProps.videoSrc !== this.props.videoSrc) {\r\n            this.setState({videoIsLoaded: true}, () => {\r\n                this._loadVideo();\r\n            });\r\n        }\r\n    }\r\n\r\n    _loadVideo = () => {\r\n        this.videoRef.current.load();\r\n    };\r\n\r\n    _getVideoSrc = () => {\r\n        this.props.fetchVideo();\r\n    };\r\n\r\n    _updateState = (key, val) => {\r\n      this.setState({\r\n          [key] : val\r\n      });\r\n    };\r\n\r\n    videoProgressHandler = () => {\r\n        const videoElement = this.videoRef.current;\r\n        const {\r\n            buffered,\r\n            duration\r\n        } = videoElement;\r\n\r\n        const bufferedTime = this._getBufferedTime(buffered);\r\n        const bufferedPercentage = getPercentage(duration, bufferedTime, 1);\r\n\r\n        this._updateState('bufferedPercent', bufferedPercentage)\r\n    };\r\n\r\n    _getBufferedTime = (timeRangeObj) => {\r\n        const length = timeRangeObj.length;\r\n        if (length < 1) return 0;\r\n        return  timeRangeObj.end(length - 1);\r\n    };\r\n\r\n    videoTimeUpdateHandler = () => {\r\n        const videoElement = this.videoRef.current;\r\n        const {\r\n            currentTime,\r\n            duration\r\n        } = videoElement;\r\n\r\n        const platedPercentage = getPercentage(duration, currentTime, 1);\r\n        this._updateState('playedPercent', platedPercentage);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <PlayerView videoSrc={this.props.videoSrc}\r\n                            playedPercent={this.state.playedPercent}\r\n                            bufferedPercent={this.state.bufferedPercent}\r\n                            progressed={this.videoProgressHandler}\r\n                            timeUpdated={this.videoTimeUpdateHandler}\r\n                            videoRef={this.videoRef}\r\n                            fetchInProgress={this.props.fetchInProgress}\r\n                            videoIsLoaded={this.state.videoIsLoaded}\r\n                            posterSrc={POSTER_SRC}/>\r\n                <Button disabled={this.props.fetchInProgress}\r\n                        clicked={this._getVideoSrc}>Get video URL</Button>\r\n            </Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchVideo})(Player);","export const VIDEO_SRC = 'http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_30fps_normal.mp4';\r\n// export const VIDEO_SRC = 'http://pmdvod.nationalgeographic.com/NG_Video/74/659/bertie-gregory-wild-life-3-big-freeze-ep3-small-arctic-animals-animals.mp4';\r\nexport const POSTER_SRC = 'https://peach.blender.org/wp-content/uploads/bbb-splash.png?x10518';","import * as actions from './../constants/actions';\r\nimport {VIDEO_SRC} from \"../constants/constants\";\r\nimport {getMockApiResponseTime, maybeThrowApiError} from \"../utils/functions\";\r\n\r\nexport const fetchVideo = () => {\r\n    const apiTime = getMockApiResponseTime();\r\n    const throwError = maybeThrowApiError();\r\n\r\n    return (dispatch) => {\r\n        dispatch({\r\n           type: actions.FETCHING_IN_PROGRESS\r\n        });\r\n\r\n        const promise = new Promise((resolve, reject) => {\r\n           setTimeout(()=> {\r\n               if (throwError){\r\n                   reject('API Error. Try again later');\r\n               }\r\n               resolve()\r\n           }, apiTime);\r\n        });\r\n\r\n        promise.then(\r\n            ()=>{\r\n                dispatch({\r\n                    type: actions.FETCH_VIDEO,\r\n                    payload : VIDEO_SRC\r\n                });\r\n            },\r\n            (error)=>{\r\n                dispatch({\r\n                    type: actions.FETCH_ERROR,\r\n                    payload: error\r\n                });\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n","import React from 'react';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store';\r\n\r\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\r\nimport Player from \"./components/Player/Player\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <div className=\"App\">\r\n                <ErrorBoundary>\r\n                    <Player/>\r\n                </ErrorBoundary>\r\n            </div>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}